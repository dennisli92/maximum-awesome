set nocursorline " don't highlight current line

" keyboard shortcuts
inoremap jj <ESC>

" highlight search
"set hlsearch
"nmap <leader>hl :let @/ = ""<CR>

" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'iTerm.app')
    colorscheme solarized
  else
    colorscheme desert
  endif
endif

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps


" BEGIN Dennis Settings
set backupdir=~/dotfiles/maximum-awesome/tmp/
set swapfile

set tabstop=2
set shiftwidth=2
set softtabstop=2
set nolist

autocmd BufNewFile,BufRead *.tex set spell
autocmd BufNewFile,BufReadPost *.ino,*.pde set filetype=cpp

" Settings for window pane
set splitbelow
set splitright

map <S-Enter> 0<Esc>
map <CR> o<Esc>
inoremap <Tab> <C-p>
set autochdir

noremap <C-S-tab> <Esc>:tabprevious<CR>
noremap <C-tab>   <Esc>:tabnext<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>
inoremap <C-tab>   <Esc>:tabnext<CR>
nnoremap <C-Insert> :tabnew<CR>
nnoremap <C-Delete> :tabclose<CR>
nnoremap <F5> :GundoToggle<CR>

autocmd VimEnter * wincmd p
" autocmd vimenter * if !argc() | NERDTree | endif

filetype plugin on

" autocmd BufWritePre * :%s/\s\+$//e

let g:Tex_CompileRule_pdf = 'latexmk -pdf'

function! NERDTreeQuit()
  redir => buffersoutput
  silent buffers
  redir END
  " 1BufNo  2Mods.     3File           4LineNo
  let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
  let windowfound = 0

  for bline in split(buffersoutput, "\n")
    let m = matchlist(bline, pattern)

    if (len(m) > 0)
      if (m[2] =~ '..a..')
        let windowfound = 1
      endif
    endif
  endfor

  if (!windowfound)
    quitall
  endif
endfunction

vnoremap <C-c> "*y
set clipboard=unnamed

au BufNewFile,BufRead *.grm set filetype=sml
au BufNewFile,BufRead *.tig set filetype=sml

function! MarkWindowSwap()
    let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
    "Mark destination
    let curNum = winnr()
    let curBuf = bufnr( "%" )
    exe g:markedWinNum . "wincmd w"
    "Switch to source and shuffle dest->source
    let markedBuf = bufnr( "%" )
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' curBuf
    "Switch to dest and shuffle source->dest
    exe curNum . "wincmd w"
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedBuf
endfunction

nmap <silent> <leader>mw :call MarkWindowSwap()<CR>
nmap <silent> <leader>pw :call DoWindowSwap()<CR>

" powerline stuff
set guifont=Ubuntu\ Mono\ derivative\ Powerline:h13
let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
" set term=xterm-256color
set termencoding=utf-8

if has("gui_running")
   let s:uname = system("uname")
   if s:uname == "Darwin\n"
    set guifont=Ubuntu\ Mono\ derivative\ Powerline:h13
   endif
endif

let NERDTreeShowHidden=1

let g:vim_arduino_auto_open_serial = 1
" autocmd BufEnter * if &modifiable | NERDTreeFind | wincmd p | endif

let g:session_autosave = 1
let g:session_autoload = 0

let g:syntastic_javascript_checkers = ['jsxhint']
let g:syntastic_javascript_jsxhint_args = '--config ~/.jshintrc'
let g:syntastic_check_on_open = 1
